{"links": {"self": {"href": "data/repositories/osrf/sdf_tutorials/pullrequests/7/comments/99893484.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdf_tutorials/diff/osrf/sdf_tutorials:738b436a54d4..a14c9eae198f?path=pose_frame_semantics%2Fproposal.md"}, "html": {"href": "#!/osrf/sdf_tutorials/pull-requests/7/_/diff#comment-99893484"}}, "parent": {"id": 99878069, "links": {"self": {"href": "data/repositories/osrf/sdf_tutorials/pullrequests/7/comments/99878069.json"}, "html": {"href": "#!/osrf/sdf_tutorials/pull-requests/7/_/diff#comment-99878069"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 7, "links": {"self": {"href": "data/repositories/osrf/sdf_tutorials/pullrequests/7.json"}, "html": {"href": "#!/osrf/sdf_tutorials/pull-requests/7"}}, "title": "Pose frame semantics: proposal for new behavior"}, "content": {"raw": "Took a whack at just scripting out what\u2019s necessary for encoding that diagram, but ran into redundancy:\n\n```xml\n<model name=\"joint_frames\">\n  <link name=\"parent\">\n    <pose>{X_MP}</pose>\n    <frame name=\"j1\">\n      <pose>{X_PJp}</pose>\n    </frame>\n  </link>\n  <link name=\"child\">\n    <!-- REDUNDANCY: X_JcC and X_CJc are inverse / reptitions... -->\n    <pose frame=\"parent/j1\">{X_JcC}</pose>\n    <frame name=\"j1\">\n      <pose>{X_CJc}</pose>\n    </frame>\n  </link>\n  <joint name=\"joint1\">\n    <pose frame=\"child/j1\"/>\n    <parent>parent</parent>\n    <child>child</child>\n  </joint>\n</model>\n```\n\nWhile we can certainly adjust the origin of `child` s.t. `X_CJc` is identity \\(a la URDF\\), that feels dirty\u2026\n\nGiven the current proposal, is there a way to remove this redundancy, and permit `//link[@name=\u201dchild\u201d]/pose` to not be driven by just one of it\u2019s connecting joints?\n\nEDIT: I guess this can be alleviated by either not specifying `child/j1`, and just letting the joint pose be specified w.r.t. `parent/j1`:\n\n```\n...\n  <link name=\"child\">\n    <pose frame=\"parent/j1\">{X_JcC}</pose>\n  </link>\n  <joint name=\"joint1\">\n    <pose frame=\"parent/j1\"/>\n    <parent>parent</parent>\n    <child>child</child>\n  </joint>\n...\n```\n\nCaveat is that now users cannot find out what `child/j1` actually is unless they add redundant information\u2026 \n\nIf, in this proposal, we define that the implicit frame `joint1` is physically attached to the child link, then everything more-or-less can make sense and be referable?\n\nAs an alternative, there could be an implicit frame added, e.g. `child/joint1`, and then users can name things s.t. they can then see `parent/joint1` and `child/joint1` and everything is physically meaningful with maximal coordinates.", "markup": "markdown", "html": "<p>Took a whack at just scripting out what\u2019s necessary for encoding that diagram, but ran into redundancy:</p>\n<div class=\"codehilite language-xml\"><pre><span></span><span class=\"nt\">&lt;model</span> <span class=\"na\">name=</span><span class=\"s\">&quot;joint_frames&quot;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;link</span> <span class=\"na\">name=</span><span class=\"s\">&quot;parent&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;pose&gt;</span>{X_MP}<span class=\"nt\">&lt;/pose&gt;</span>\n    <span class=\"nt\">&lt;frame</span> <span class=\"na\">name=</span><span class=\"s\">&quot;j1&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;pose&gt;</span>{X_PJp}<span class=\"nt\">&lt;/pose&gt;</span>\n    <span class=\"nt\">&lt;/frame&gt;</span>\n  <span class=\"nt\">&lt;/link&gt;</span>\n  <span class=\"nt\">&lt;link</span> <span class=\"na\">name=</span><span class=\"s\">&quot;child&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"c\">&lt;!-- REDUNDANCY: X_JcC and X_CJc are inverse / reptitions... --&gt;</span>\n    <span class=\"nt\">&lt;pose</span> <span class=\"na\">frame=</span><span class=\"s\">&quot;parent/j1&quot;</span><span class=\"nt\">&gt;</span>{X_JcC}<span class=\"nt\">&lt;/pose&gt;</span>\n    <span class=\"nt\">&lt;frame</span> <span class=\"na\">name=</span><span class=\"s\">&quot;j1&quot;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;pose&gt;</span>{X_CJc}<span class=\"nt\">&lt;/pose&gt;</span>\n    <span class=\"nt\">&lt;/frame&gt;</span>\n  <span class=\"nt\">&lt;/link&gt;</span>\n  <span class=\"nt\">&lt;joint</span> <span class=\"na\">name=</span><span class=\"s\">&quot;joint1&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;pose</span> <span class=\"na\">frame=</span><span class=\"s\">&quot;child/j1&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;parent&gt;</span>parent<span class=\"nt\">&lt;/parent&gt;</span>\n    <span class=\"nt\">&lt;child&gt;</span>child<span class=\"nt\">&lt;/child&gt;</span>\n  <span class=\"nt\">&lt;/joint&gt;</span>\n<span class=\"nt\">&lt;/model&gt;</span>\n</pre></div>\n\n\n<p>While we can certainly adjust the origin of <code>child</code> s.t. <code>X_CJc</code> is identity (a la URDF), that feels dirty\u2026</p>\n<p>Given the current proposal, is there a way to remove this redundancy, and permit <code>//link[@name=\u201dchild\u201d]/pose</code> to not be driven by just one of it\u2019s connecting joints?</p>\n<p>EDIT: I guess this can be alleviated by either not specifying <code>child/j1</code>, and just letting the joint pose be specified w.r.t. <code>parent/j1</code>:</p>\n<div class=\"codehilite\"><pre><span></span>...\n  <span class=\"nt\">&lt;link</span> <span class=\"na\">name=</span><span class=\"s\">&quot;child&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;pose</span> <span class=\"na\">frame=</span><span class=\"s\">&quot;parent/j1&quot;</span><span class=\"nt\">&gt;</span>{X_JcC}<span class=\"nt\">&lt;/pose&gt;</span>\n  <span class=\"nt\">&lt;/link&gt;</span>\n  <span class=\"nt\">&lt;joint</span> <span class=\"na\">name=</span><span class=\"s\">&quot;joint1&quot;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;pose</span> <span class=\"na\">frame=</span><span class=\"s\">&quot;parent/j1&quot;</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;parent&gt;</span>parent<span class=\"nt\">&lt;/parent&gt;</span>\n    <span class=\"nt\">&lt;child&gt;</span>child<span class=\"nt\">&lt;/child&gt;</span>\n  <span class=\"nt\">&lt;/joint&gt;</span>\n...\n</pre></div>\n\n\n<p>Caveat is that now users cannot find out what <code>child/j1</code> actually is unless they add redundant information\u2026 </p>\n<p>If, in this proposal, we define that the implicit frame <code>joint1</code> is physically attached to the child link, then everything more-or-less can make sense and be referable?</p>\n<p>As an alternative, there could be an implicit frame added, e.g. <code>child/joint1</code>, and then users can name things s.t. they can then see <code>parent/joint1</code> and <code>child/joint1</code> and everything is physically meaningful with maximal coordinates.</p>", "type": "rendered"}, "created_on": "2019-04-24T19:39:05.518588+00:00", "user": {"display_name": "Eric Cousineau", "uuid": "{71c9fc05-02c8-45e1-adfa-13c8ac3399dc}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B71c9fc05-02c8-45e1-adfa-13c8ac3399dc%7D"}, "html": {"href": "https://bitbucket.org/%7B71c9fc05-02c8-45e1-adfa-13c8ac3399dc%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557057:f3a199b9-5784-4964-9644-6ef224bc7dc1/28a4d748-0fd4-4038-bf3d-55a77eb73ede/128"}}, "nickname": "eacousineau", "type": "user", "account_id": "557057:f3a199b9-5784-4964-9644-6ef224bc7dc1"}, "inline": {"to": 152, "from": null, "outdated": true, "path": "pose_frame_semantics/proposal.md"}, "updated_on": "2019-04-24T19:44:53.175284+00:00", "type": "pullrequest_comment", "id": 99893484}