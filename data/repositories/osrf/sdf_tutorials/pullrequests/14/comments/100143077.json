{"links": {"self": {"href": "data/repositories/osrf/sdf_tutorials/pullrequests/14/comments/100143077.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/sdf_tutorials/diff/osrf/sdf_tutorials:2247e489fd8a..738b436a54d4?path=pose_frame_semantics%2Fproposal.md"}, "html": {"href": "#!/osrf/sdf_tutorials/pull-requests/14/_/diff#comment-100143077"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/osrf/sdf_tutorials/pullrequests/14.json"}, "html": {"href": "#!/osrf/sdf_tutorials/pull-requests/14"}}, "title": "Pose frame semantics: Suggested semantics to handle maximal coordinates"}, "content": {"raw": "As you [discussed in PR 7](#!/osrf/sdf_tutorials/pull-requests/7/pose-frame-semantics-proposal-for-new/activity#comment-99893484), adding a `Jc` frame to the child link requires redundant information due to our name scoping rules, but adding an implicit frame for each joint added to both the parent and child link would be a simple way to get around that. I was about to say that it would impose additional naming restrictions on `//link/*` elements to avoid name collisions with joints like `<collision name=\"joint1\">` and `<visual name=\"joint1\">`, however unlikely. But I remembered that our proposal calls for `//pose@frame` to only accept names of model, link, joint, and frame tags, so I guess the only added restriction would be that you couldn't have a `//link/frame@name` that collides with a joint name `<link><frame name=\"joint1\">`.\n\nWhat do you think?", "markup": "markdown", "html": "<p>As you <a data-is-external-link=\"true\" href=\"#!/osrf/sdf_tutorials/pull-requests/7/pose-frame-semantics-proposal-for-new/activity#comment-99893484\" rel=\"nofollow\">discussed in PR 7</a>, adding a <code>Jc</code> frame to the child link requires redundant information due to our name scoping rules, but adding an implicit frame for each joint added to both the parent and child link would be a simple way to get around that. I was about to say that it would impose additional naming restrictions on <code>//link/*</code> elements to avoid name collisions with joints like <code>&lt;collision name=\"joint1\"&gt;</code> and <code>&lt;visual name=\"joint1\"&gt;</code>, however unlikely. But I remembered that our proposal calls for <code>//pose@frame</code> to only accept names of model, link, joint, and frame tags, so I guess the only added restriction would be that you couldn't have a <code>//link/frame@name</code> that collides with a joint name <code>&lt;link&gt;&lt;frame name=\"joint1\"&gt;</code>.</p>\n<p>What do you think?</p>", "type": "rendered"}, "created_on": "2019-04-26T12:52:38.285294+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "inline": {"to": 335, "from": null, "outdated": true, "path": "pose_frame_semantics/proposal.md"}, "updated_on": "2019-04-26T12:52:38.297405+00:00", "type": "pullrequest_comment", "id": 100143077}